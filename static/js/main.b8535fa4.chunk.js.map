{"version":3,"sources":["UserContext.js","components/resultcard.js","components/Results.js","components/Control.js","App.js","serviceWorker.js","index.js"],"names":["UserContext","createContext","DataProvider","props","state","services","providers","control","result","loading","this","getData","Axios","get","then","results","setState","data","catch","e","console","log","Provider","value","children","Component","resultcard","className","src","alt","subspecialties","length","map","x","i","key","React","memo","returnData","id","attributes","Control","useState","selectedService","setSelectedService","setResults","useContext","evntHandleClick","target","fnFilterData","serviceName","arrInclude","included","filter","service","arrData","push","find","relationships","type","useEffect","elems","document","querySelectorAll","forEach","call","el","classList","remove","getElementById","style","borderRight","listStyleType","padding","onClick","data-id","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b8535fa4.chunk.js","sourcesContent":["import React, { createContext, Component } from \"react\";\r\nimport Axios from \"axios\";\r\nconst UserContext = createContext();\r\n\r\nclass DataProvider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      services: [],\r\n      providers: [],\r\n      control: [],\r\n      result: [],\r\n      loading: true,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    Axios.get(\r\n      \"https://api.inquickerstaging.com/v3/winter.inquickerstaging.com/services\"\r\n    )\r\n      .then((results) => this.setState({ services: results.data }))\r\n      .catch((e) => console.log(e));\r\n\r\n    Axios.get(\r\n      \"https://api.inquickerstaging.com/v3/winter.inquickerstaging.com/providers?include=locations%2Cschedules.location&page%5Bnumber%5D=1&page%5Bsize%5D=10\"\r\n    )\r\n      .then((results) => this.setState({ providers: results.data }))\r\n      .catch((e) => console.log(e));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <UserContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </UserContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport { UserContext, DataProvider };\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction resultcard(props) {\r\n  const data = props.data;\r\n  return (\r\n    <div className=\"card mb-3\">\r\n      <div className=\"row no-gutters\">\r\n        <div className=\"col-md-4\">\r\n          {data[\"card-image\"] ? (\r\n            <img\r\n              src={data[\"card-image\"]}\r\n              className=\"card-img\"\r\n              alt={data[\"name\"]}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <div className=\"col-md-8\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">{data[\"name\"]}</h5>\r\n            <div className=\"card-text\">\r\n              {data.subspecialties.length > 0 ? (\r\n                <div className=\"list\">\r\n                  <h6>\r\n                    <b>Speciality</b>\r\n                  </h6>\r\n                  <ul>\r\n                    {data.subspecialties.map((x, i) => (\r\n                      <li key={i}> {x} </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default resultcard;\r\n","import React from \"react\";\r\nimport Resultcard from \"./resultcard\";\r\n\r\nfunction Results(data) {\r\n  let returnData = \"\";\r\n  if (data.data.length > 0) {\r\n    returnData = data.data.map((x) => (\r\n      <Resultcard key={x.id} data={x.attributes} />\r\n    ));\r\n  } else {\r\n    returnData = \"Click on services to view the providers data\";\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h3>Results</h3>\r\n      <div className=\"row\">{returnData}</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default React.memo(Results);\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { UserContext } from \"../UserContext\";\r\nimport Results from \"./Results\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction Control() {\r\n  const [selectedService, setSelectedService] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n\r\n  const { services, providers } = useContext(UserContext);\r\n\r\n  const evntHandleClick = (e) => {\r\n    setSelectedService(e.target.id);\r\n    setResults(fnFilterData(e.target.attributes[\"data-id\"].value));\r\n  };\r\n\r\n  const fnFilterData = (serviceName) => {\r\n    var pInclud = providers.included;\r\n    var arrInclude = pInclud.filter(\r\n      (x) => x.attributes.service === serviceName\r\n    );\r\n    var data = providers.data;\r\n    var arrData = [];\r\n    for (let i = 0; i < arrInclude.length; i++) {\r\n      arrData.push(\r\n        data.find(\r\n          (x) =>\r\n            x.relationships[arrInclude[i].type].data[0].id === arrInclude[i].id\r\n        )\r\n      );\r\n    }\r\n    return arrData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedService) {\r\n      var elems = document.querySelectorAll(\"li.highlighted\");\r\n      [].forEach.call(elems, function (el) {\r\n        el.classList.remove(\"highlighted\");\r\n      });\r\n      document.getElementById(selectedService).className = \"highlighted\";\r\n    }\r\n  }, [selectedService]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"col-md-12\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3\" style={{ borderRight: \"2px dotted #000\" }}>\r\n            <h3>Services</h3>\r\n            <div className=\"col-md-12\">\r\n              {services.data ? (\r\n                <ul style={{ listStyleType: \"none\", padding: \"0\" }}>\r\n                  {services.data.map((service) => (\r\n                    <li\r\n                      key={service.id}\r\n                      onClick={evntHandleClick}\r\n                      id={service.id}\r\n                      data-id={service.attributes.name}\r\n                    >\r\n                      {service.attributes.name}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                \"Please Wait. Loading Data...\"\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-9\">\r\n            <div className=\"col-md-12\">\r\n              <Results data={results} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Control;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { DataProvider } from \"./UserContext\";\nimport Control from \"./components/Control\";\n\nfunction App() {\n  return (\n    <div className=\"col-md-12\">\n      <nav className=\"navbar navbar-light bg-light\">\n        <span className=\"navbar-brand mb-0 h1\">\n          Home Assignment by Sumit Sonar{\" \"}\n        </span>\n      </nav>\n      <DataProvider>\n        <Control />\n      </DataProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}